掘进文章 https://juejin.im/post/6844903666260901896

The reliability and scalability of a system is dependent on how its application state is managed

### Google BigTable
wide column


### Google Spanner
Spanner stores large amounts of mutable structured data. Spanner allows users to perform arbitrary queries using SQL with relational data while maintaining strong consistency and high availability for that data with synchronous replication.

Key features of Spanner:

Transactions can be applied across rows, columns, tables, and databases within a Spanner universe.
Clients can control the replication and placement of data using automatic multi-site replication and failover.
Replication is synchronous and strongly consistent.
Reads are strongly consistent and data is versioned to allow for stale reads: clients can read previous versions of data, subject to garbage collection windows.
Supports a native SQL interface for reading and writing data.

Spanner uses the Paxos algorithm as part of its operation to shard (partition) data across hundreds of servers.[1] It makes heavy use of hardware-assisted clock synchronization using GPS clocks and atomic clocks to ensure global consistency.[1]

Google's F1 SQL database management system (DBMS) is built on top of Spanner,[5] replacing Google's custom MySQL variant.[6]

### Google F1


Experience at Amazon has shown that data stores that provide
ACID guarantees tend to have poor availability. This has been
widely acknowledged by both the industry and academia
### Dynamo
key/value

paxos 
- Paxos, a protocol for solving consensus in a network to maintain strict consistency requirements for small groups of unreliable processes. Not practical when larger number of nodes are involved.

Gossip protocols
- which maintain relaxed consistency requirements amongst a very large group of nodes. 


NoSQL
- 优点
数据模型简单,key/value对,性能好,查询依赖于key
- 缺点
如果数据更新非常频繁，或者查询条件非常复杂，则不适合key/value nosql

Key-Value stores are ideal for applications with simple data models and require high velocity read & writes.

Sample use cases include:

Session management
Profiles, preferences & configurations
Data Caching
Storing multimedia files or large objects
Key-Value stores are not suitable when the application requires frequent updates or complex queries involving specific data values, multiple unique keys and relationships between them.

Examples of Key-Value databases include – Redis and Riak.


Document store
- 特点:
key/document, in document, there are attributes, so we can create index on these attributes.
flexible schema and complex querying capabilities

Due to its flexible schema and complex querying capabilities, Document Stores are popular and suitable for variety of use cases such as:

Content management systems
E-commerce websites
Middleware applications that use JSON
Document stores are not suitable if the application requires complex transactions with multiple operations.

Examples of Document Store databases include – MongoDB and Couchbase.


HBASE - CP - 优点
- 强一致性
- 范围查找
- hadoop生态
- 方便做统计和日志分析
- 适合write-heavy应用
缺点
- master 单点
- 部署成本高，需要部署zookeeper，HDFS
- 学习曲线高
- 非DBaaS
- 牺牲了随机读性能

Cassandra - AP 或者 CP， depends on configuration
- 高性能读写
- masterless
- 有查询语句
- DBAAS
- 支持超大数据规模, PT级别

Mongodb 优点 - 结构化和半结构化数据 - CP
- schemaless
- JSON格式
- 支持secondary index 
- 可以做复杂查询
缺点
- schema很难追踪，不知道存储的是啥东西
- 不支持事务
- 不适合超大规模数据,例如 PT级别
- validation hard

Document DB
- 适用与应用的schema不稳定, 一直在变化演进, 然后对事务没有要求, week schema enforcement
- mongodb 牺牲事务, 存储的是文档形式的对象, 适合存储小型的文档, 因为大文档payload高, 无法局部更新时, 会造成重写过多的内容
- mongodb 性能不错, 有sharding 和 持久化, 适合大多数在线业务 CRUD 操作

MySQL 
- strong schema enforcement
- 需要事务支持, 比如银行类的业务

Redis
- key/value,  no schema, 可支持的数据结构非常灵活
- 使用场景, 纯内存操作, 适合要求低延迟, 扩展性要求高的场景

Offline on online KV 
- 对于存储在hadoop里的数据, 我们对外暴露这些数据时，可以采用bulk upload的形式, 把这些数据加载到offline to online的KV storage里, 加速访问查询

